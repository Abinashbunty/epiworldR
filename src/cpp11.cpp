// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// db.cpp
int queuing_on_cpp(SEXP model, std::string model_class);
extern "C" SEXP _epiworldR_queuing_on_cpp(SEXP model, SEXP model_class) {
  BEGIN_CPP11
    return cpp11::as_sexp(queuing_on_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(model), cpp11::as_cpp<cpp11::decay_t<std::string>>(model_class)));
  END_CPP11
}
// db.cpp
int queuing_off_cpp(SEXP model, std::string model_class);
extern "C" SEXP _epiworldR_queuing_off_cpp(SEXP model, SEXP model_class) {
  BEGIN_CPP11
    return cpp11::as_sexp(queuing_off_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(model), cpp11::as_cpp<cpp11::decay_t<std::string>>(model_class)));
  END_CPP11
}
// db.cpp
data_frame get_hist_total_cpp(SEXP model, std::string model_class);
extern "C" SEXP _epiworldR_get_hist_total_cpp(SEXP model, SEXP model_class) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_hist_total_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(model), cpp11::as_cpp<cpp11::decay_t<std::string>>(model_class)));
  END_CPP11
}
// db.cpp
doubles get_transition_probability_cpp(SEXP model, std::string model_class);
extern "C" SEXP _epiworldR_get_transition_probability_cpp(SEXP model, SEXP model_class) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_transition_probability_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(model), cpp11::as_cpp<cpp11::decay_t<std::string>>(model_class)));
  END_CPP11
}
// db.cpp
cpp11::strings get_status_cpp(SEXP model, std::string model_class);
extern "C" SEXP _epiworldR_get_status_cpp(SEXP model, SEXP model_class) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_status_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(model), cpp11::as_cpp<cpp11::decay_t<std::string>>(model_class)));
  END_CPP11
}
// db.cpp
cpp11::data_frame get_reproductive_number_cpp(SEXP model, std::string model_class);
extern "C" SEXP _epiworldR_get_reproductive_number_cpp(SEXP model, SEXP model_class) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_reproductive_number_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(model), cpp11::as_cpp<cpp11::decay_t<std::string>>(model_class)));
  END_CPP11
}
// model.cpp
int init_cpp(SEXP m, int days, int seed);
extern "C" SEXP _epiworldR_init_cpp(SEXP m, SEXP days, SEXP seed) {
  BEGIN_CPP11
    return cpp11::as_sexp(init_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m), cpp11::as_cpp<cpp11::decay_t<int>>(days), cpp11::as_cpp<cpp11::decay_t<int>>(seed)));
  END_CPP11
}
// model.cpp
int print_cpp(SEXP m);
extern "C" SEXP _epiworldR_print_cpp(SEXP m) {
  BEGIN_CPP11
    return cpp11::as_sexp(print_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m)));
  END_CPP11
}
// model.cpp
int agents_smallworld_cpp(SEXP m, unsigned int n, unsigned int k, bool d, double p);
extern "C" SEXP _epiworldR_agents_smallworld_cpp(SEXP m, SEXP n, SEXP k, SEXP d, SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(agents_smallworld_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(n), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(k), cpp11::as_cpp<cpp11::decay_t<bool>>(d), cpp11::as_cpp<cpp11::decay_t<double>>(p)));
  END_CPP11
}
// model.cpp
int run_cpp(SEXP m);
extern "C" SEXP _epiworldR_run_cpp(SEXP m) {
  BEGIN_CPP11
    return cpp11::as_sexp(run_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m)));
  END_CPP11
}
// model_seir.cpp
SEXP ModelSEIR_cpp(std::string name, double prevalence, double infectiousness, double incubation_days, double recovery);
extern "C" SEXP _epiworldR_ModelSEIR_cpp(SEXP name, SEXP prevalence, SEXP infectiousness, SEXP incubation_days, SEXP recovery) {
  BEGIN_CPP11
    return cpp11::as_sexp(ModelSEIR_cpp(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<double>>(prevalence), cpp11::as_cpp<cpp11::decay_t<double>>(infectiousness), cpp11::as_cpp<cpp11::decay_t<double>>(incubation_days), cpp11::as_cpp<cpp11::decay_t<double>>(recovery)));
  END_CPP11
}
// model_seirconn.cpp
SEXP ModelSEIRCONN_cpp(std::string name, unsigned int n, double prevalence, double reproductive_number, double prob_transmission, double incubation_days, double prob_recovery);
extern "C" SEXP _epiworldR_ModelSEIRCONN_cpp(SEXP name, SEXP n, SEXP prevalence, SEXP reproductive_number, SEXP prob_transmission, SEXP incubation_days, SEXP prob_recovery) {
  BEGIN_CPP11
    return cpp11::as_sexp(ModelSEIRCONN_cpp(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(n), cpp11::as_cpp<cpp11::decay_t<double>>(prevalence), cpp11::as_cpp<cpp11::decay_t<double>>(reproductive_number), cpp11::as_cpp<cpp11::decay_t<double>>(prob_transmission), cpp11::as_cpp<cpp11::decay_t<double>>(incubation_days), cpp11::as_cpp<cpp11::decay_t<double>>(prob_recovery)));
  END_CPP11
}
// model_seirconn.cpp
int print_seirconn(SEXP m);
extern "C" SEXP _epiworldR_print_seirconn(SEXP m) {
  BEGIN_CPP11
    return cpp11::as_sexp(print_seirconn(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m)));
  END_CPP11
}
// model_seirconn.cpp
int run_seirconn(SEXP m);
extern "C" SEXP _epiworldR_run_seirconn(SEXP m) {
  BEGIN_CPP11
    return cpp11::as_sexp(run_seirconn(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m)));
  END_CPP11
}
// model_sir.cpp
SEXP ModelSIR_cpp(std::string name, double prevalence, double infectiousness, double recovery);
extern "C" SEXP _epiworldR_ModelSIR_cpp(SEXP name, SEXP prevalence, SEXP infectiousness, SEXP recovery) {
  BEGIN_CPP11
    return cpp11::as_sexp(ModelSIR_cpp(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<double>>(prevalence), cpp11::as_cpp<cpp11::decay_t<double>>(infectiousness), cpp11::as_cpp<cpp11::decay_t<double>>(recovery)));
  END_CPP11
}
// model_sirconn.cpp
SEXP ModelSIRCONN_cpp(std::string name, unsigned int n, double prevalence, double reproductive_number, double prob_transmission, double prob_recovery);
extern "C" SEXP _epiworldR_ModelSIRCONN_cpp(SEXP name, SEXP n, SEXP prevalence, SEXP reproductive_number, SEXP prob_transmission, SEXP prob_recovery) {
  BEGIN_CPP11
    return cpp11::as_sexp(ModelSIRCONN_cpp(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(n), cpp11::as_cpp<cpp11::decay_t<double>>(prevalence), cpp11::as_cpp<cpp11::decay_t<double>>(reproductive_number), cpp11::as_cpp<cpp11::decay_t<double>>(prob_transmission), cpp11::as_cpp<cpp11::decay_t<double>>(prob_recovery)));
  END_CPP11
}
// model_sis.cpp
SEXP ModelSIS_cpp(std::string name, double prevalence, double infectiousness, double recovery);
extern "C" SEXP _epiworldR_ModelSIS_cpp(SEXP name, SEXP prevalence, SEXP infectiousness, SEXP recovery) {
  BEGIN_CPP11
    return cpp11::as_sexp(ModelSIS_cpp(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<double>>(prevalence), cpp11::as_cpp<cpp11::decay_t<double>>(infectiousness), cpp11::as_cpp<cpp11::decay_t<double>>(recovery)));
  END_CPP11
}
// model_surv.cpp
SEXP ModelSURV_cpp(std::string name, double prevalence, double efficacy_vax, double latent_period, double prob_symptoms, double prop_vaccinated, double prop_vax_redux_transm, double infect_period, double prop_vax_redux_infect, double surveillance_prob, double prob_transmission, double prob_death, double prob_noreinfect);
extern "C" SEXP _epiworldR_ModelSURV_cpp(SEXP name, SEXP prevalence, SEXP efficacy_vax, SEXP latent_period, SEXP prob_symptoms, SEXP prop_vaccinated, SEXP prop_vax_redux_transm, SEXP infect_period, SEXP prop_vax_redux_infect, SEXP surveillance_prob, SEXP prob_transmission, SEXP prob_death, SEXP prob_noreinfect) {
  BEGIN_CPP11
    return cpp11::as_sexp(ModelSURV_cpp(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<double>>(prevalence), cpp11::as_cpp<cpp11::decay_t<double>>(efficacy_vax), cpp11::as_cpp<cpp11::decay_t<double>>(latent_period), cpp11::as_cpp<cpp11::decay_t<double>>(prob_symptoms), cpp11::as_cpp<cpp11::decay_t<double>>(prop_vaccinated), cpp11::as_cpp<cpp11::decay_t<double>>(prop_vax_redux_transm), cpp11::as_cpp<cpp11::decay_t<double>>(infect_period), cpp11::as_cpp<cpp11::decay_t<double>>(prop_vax_redux_infect), cpp11::as_cpp<cpp11::decay_t<double>>(surveillance_prob), cpp11::as_cpp<cpp11::decay_t<double>>(prob_transmission), cpp11::as_cpp<cpp11::decay_t<double>>(prob_death), cpp11::as_cpp<cpp11::decay_t<double>>(prob_noreinfect)));
  END_CPP11
}
// virus.cpp
SEXP virus_cpp(std::string name, double post_immunity, double prob_infecting, double prob_recovery, double prob_death);
extern "C" SEXP _epiworldR_virus_cpp(SEXP name, SEXP post_immunity, SEXP prob_infecting, SEXP prob_recovery, SEXP prob_death) {
  BEGIN_CPP11
    return cpp11::as_sexp(virus_cpp(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<double>>(post_immunity), cpp11::as_cpp<cpp11::decay_t<double>>(prob_infecting), cpp11::as_cpp<cpp11::decay_t<double>>(prob_recovery), cpp11::as_cpp<cpp11::decay_t<double>>(prob_death)));
  END_CPP11
}
// virus.cpp
int virus_set_status_cpp(SEXP v, size_t init, size_t end, size_t removed);
extern "C" SEXP _epiworldR_virus_set_status_cpp(SEXP v, SEXP init, SEXP end, SEXP removed) {
  BEGIN_CPP11
    return cpp11::as_sexp(virus_set_status_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(v), cpp11::as_cpp<cpp11::decay_t<size_t>>(init), cpp11::as_cpp<cpp11::decay_t<size_t>>(end), cpp11::as_cpp<cpp11::decay_t<size_t>>(removed)));
  END_CPP11
}
// virus.cpp
int add_virus_cpp(SEXP m, SEXP v, double preval);
extern "C" SEXP _epiworldR_add_virus_cpp(SEXP m, SEXP v, SEXP preval) {
  BEGIN_CPP11
    return cpp11::as_sexp(add_virus_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m), cpp11::as_cpp<cpp11::decay_t<SEXP>>(v), cpp11::as_cpp<cpp11::decay_t<double>>(preval)));
  END_CPP11
}
// virus.cpp
int add_virus_n_cpp(SEXP m, SEXP v, size_t preval);
extern "C" SEXP _epiworldR_add_virus_n_cpp(SEXP m, SEXP v, SEXP preval) {
  BEGIN_CPP11
    return cpp11::as_sexp(add_virus_n_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(m), cpp11::as_cpp<cpp11::decay_t<SEXP>>(v), cpp11::as_cpp<cpp11::decay_t<size_t>>(preval)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_epiworldR_ModelSEIRCONN_cpp",              (DL_FUNC) &_epiworldR_ModelSEIRCONN_cpp,               7},
    {"_epiworldR_ModelSEIR_cpp",                  (DL_FUNC) &_epiworldR_ModelSEIR_cpp,                   5},
    {"_epiworldR_ModelSIRCONN_cpp",               (DL_FUNC) &_epiworldR_ModelSIRCONN_cpp,                6},
    {"_epiworldR_ModelSIR_cpp",                   (DL_FUNC) &_epiworldR_ModelSIR_cpp,                    4},
    {"_epiworldR_ModelSIS_cpp",                   (DL_FUNC) &_epiworldR_ModelSIS_cpp,                    4},
    {"_epiworldR_ModelSURV_cpp",                  (DL_FUNC) &_epiworldR_ModelSURV_cpp,                  13},
    {"_epiworldR_add_virus_cpp",                  (DL_FUNC) &_epiworldR_add_virus_cpp,                   3},
    {"_epiworldR_add_virus_n_cpp",                (DL_FUNC) &_epiworldR_add_virus_n_cpp,                 3},
    {"_epiworldR_agents_smallworld_cpp",          (DL_FUNC) &_epiworldR_agents_smallworld_cpp,           5},
    {"_epiworldR_get_hist_total_cpp",             (DL_FUNC) &_epiworldR_get_hist_total_cpp,              2},
    {"_epiworldR_get_reproductive_number_cpp",    (DL_FUNC) &_epiworldR_get_reproductive_number_cpp,     2},
    {"_epiworldR_get_status_cpp",                 (DL_FUNC) &_epiworldR_get_status_cpp,                  2},
    {"_epiworldR_get_transition_probability_cpp", (DL_FUNC) &_epiworldR_get_transition_probability_cpp,  2},
    {"_epiworldR_init_cpp",                       (DL_FUNC) &_epiworldR_init_cpp,                        3},
    {"_epiworldR_print_cpp",                      (DL_FUNC) &_epiworldR_print_cpp,                       1},
    {"_epiworldR_print_seirconn",                 (DL_FUNC) &_epiworldR_print_seirconn,                  1},
    {"_epiworldR_queuing_off_cpp",                (DL_FUNC) &_epiworldR_queuing_off_cpp,                 2},
    {"_epiworldR_queuing_on_cpp",                 (DL_FUNC) &_epiworldR_queuing_on_cpp,                  2},
    {"_epiworldR_run_cpp",                        (DL_FUNC) &_epiworldR_run_cpp,                         1},
    {"_epiworldR_run_seirconn",                   (DL_FUNC) &_epiworldR_run_seirconn,                    1},
    {"_epiworldR_virus_cpp",                      (DL_FUNC) &_epiworldR_virus_cpp,                       5},
    {"_epiworldR_virus_set_status_cpp",           (DL_FUNC) &_epiworldR_virus_set_status_cpp,            4},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_epiworldR(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
